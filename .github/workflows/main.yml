# .github/workflows/main.yml
name: CI/CD Pipeline to Azure VM

on:
  push:
    branches:
      - main # Trigger on push to the main branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

env:
  AZURE_RESOURCE_GROUP: "rg-lucky-jaybird" # Your Azure Resource Group name
  AZURE_VM_NAME: "myVM" # Your VM's name as defined in Terraform
  AZURE_VM_USERNAME: "mohibul" # Your SSH username for the VM

jobs:
  # Job to build and push Docker image
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username secret
          password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub password secret

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Network-SystemAdmin-CA-01 # Path to Dockerfile context
          file: ./Network-SystemAdmin-CA-01/nginx/Dockerfile.nginx # Path to Dockerfile
          push: true
          tags: mohibulhasan/network-systemadmin-ca-01-web:1.0 #  exact Docker Hub image and tag
          cache-from: type=gha # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max # Store build cache

  # Job to provision infrastructure with Terraform
  terraform-apply:
    needs: build-and-push-docker # Depends on Docker image being built
    runs-on: ubuntu-latest
    outputs:
      vm_public_ip: ${{ steps.terraform-output.outputs.vm_public_ip }} # Pass VM IP to next job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0 # Specifying desired Terraform version

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./Network-SystemAdmin-CA-01/DeployTools/terraform # path to Terraform files

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./Network-SystemAdmin-CA-01/DeployTools/terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./Network-SystemAdmin-CA-01/DeployTools/terraform

      - name: Get VM Public IP from Terraform output
        id: terraform-output
        run: |
          VM_IP=$(terraform output -raw vm_public_ip)
          echo "vm_public_ip=$VM_IP" >> $GITHUB_OUTPUT
        working-directory: ./Network-SystemAdmin-CA-01/DeployTools/terraform

  # Job to deploy application with Ansible
  ansible-deploy:
    needs: terraform-apply # Depends on Terraform provisioning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: pip install ansible docker # Install ansible and docker for ansible modules

      - name: Set up SSH key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_azure_vm.pem # Create a key file
          chmod 400 ~/.ssh/id_azure_vm.pem # Set strict permissions
          ssh-keyscan -H ${{ needs.terraform-apply.outputs.vm_public_ip }} >> ~/.ssh/known_hosts # Add VM to known_hosts to prevent SSH prompts
        # Make sure this uses the correct key filename as referenced in inventory.ini

      - name: Create Ansible inventory
        # create the inventory dynamically for this run
        run: |
          echo "[web_servers]" > ansible/inventory.ini
          echo "${{ needs.terraform-apply.outputs.vm_public_ip }} ansible_user=${{ env.AZURE_VM_USERNAME }} ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> ansible/inventory.ini
        working-directory: ./Network-SystemAdmin-CA-01/DeployTools/ansible # Path to ansible directory

      - name: Run Ansible Playbook - Install Docker
        run: ansible-playbook -i inventory.ini install_docker.yml
        working-directory: ./Network-SystemAdmin-CA-01/DeployTools/ansible # Path to ansible directory

      - name: Run Ansible Playbook - Deploy Application
        run: ansible-playbook -i inventory.ini deploy_app.yml
        working-directory: ./Network-SystemAdmin-CA-01/DeployTools/ansible # Path to ansible directory
